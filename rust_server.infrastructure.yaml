AWSTemplateFormatVersion: '2010-09-09'
Description: Persistent Spot EC2 instance for Rust Server with customizable instance type, and EBS volume

Parameters:
  InstanceType:
    Type: String
    Default: r7i.large
    Description: EC2 instance to run rust server. 16GB RAM 2vCPU USD$0.042/hr spot instance. Might be able to get away with 10-14GB RAM

  EbsVolumeSize:
    Type: Number
    Default: 20
    Description: Size in GB for the root EBS volume. Minimum should be 10.

  DefaultVPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC to deploy the instance into (use default if unsure)
  
  ServerIdentity:
    Type: String
    Default: server
    Description: +server.identity value

  Seed:
    Type: String
    Default: '890123456789'
    Description: +server.seed value

  MaxPlayers:
    Type: Number
    Default: 5
    Description: +server.maxplayers value

  MapSize:
    Type: Number
    Default: 3500
    Description: +server.worldsize value

  RconPassword:
    Type: String
    NoEcho: true
    Description: RCON console password

  ServerPassword:
    Type: String
    NoEcho: true
    Description: Player join password

  Hostname:
    Type: String
    Default: 'My Rust Server'
    Description: +server.hostname value

  SteamIdOwner:
    Type: String
    Description: SteamID of the server owner



Resources:
  # Create IAM Role rustserver_ec2tos3_fullaccess so EC2 can access the S3 bucket specified in the parameters
  EC2S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: rustserver_ec2tos3_fullaccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AccessS3RustBackups
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - s3:ListBucket
                Resource: 
                  - !Sub arn:aws:s3:::${BucketName}
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: 
                  - !Sub arn:aws:s3:::${BucketName}/*
  EC2S3AccessInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: rustserver_ec2tos3_fullaccess
      Path: /
      Roles:
        - !Ref EC2S3AccessRole

  RustSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Rust-Server-SG
      GroupDescription: Allow SSH and Rust server port access
      VpcId: !Ref DefaultVPC
      SecurityGroupIngress:
        - IpProtocol: tcp   # SSH
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 28015
          ToPort: 28016
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 28015
          ToPort: 28016
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1       # Allow all outbound traffic
          CidrIp: 0.0.0.0/0

  RustLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: rust-spot-template
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        KeyName: key_name
        ImageId: ami-04da26f654d3383cf  # Ubuntu 22.04 LTS in eu-west-2
        SecurityGroupIds:
          - !Ref RustSecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: !Ref EbsVolumeSize
              VolumeType: gp3
              DeleteOnTermination: true
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            SpotInstanceType: persistent
            InstanceInterruptionBehavior: stop
        IamInstanceProfile:
          Arn: !GetAtt EC2S3AccessInstanceProfile.Arn
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            SERVER_IDENTITY="${ServerIdentity}"
            SEED="${Seed}"
            MAX_PLAYERS="${MaxPlayers}"
            MAP_SIZE="${MapSize}"
            RCON_PASSWORD="${RconPassword}"
            SERVER_PW="${ServerPassword}"
            HOSTNAME="${Hostname}"
            STEAMID_OWNER="${SteamIdOwner}"
            
            cd ~
            curl -s "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            sudo unzip -q awscliv2.zip && sudo ./aws/install
            rm -rf awscliv2.zip aws/
            
            sudo apt update && sudo apt upgrade -y
            sudo apt install unzip 
            sudo add-apt-repository multiverse -y && sudo dpkg --add-architecture i386 && sudo apt update && sudo apt install -y steamcmd
            
            mkdir -p ~/rust/server && /usr/games/steamcmd +@sSteamCmdForcePlatformType linux +force_install_dir $HOME/rust/server +login anonymous +app_update 258550 +quit
            mkdir -p $HOME/rust/server/server/${SERVER_IDENTITY}/cfg && sudo tee $HOME/rust/server/server/${SERVER_IDENTITY}/cfg/users.cfg > /dev/null <<EOF
            ownerid "${STEAMID_OWNER}" "admin"
            EOF
            
            sudo tee /etc/systemd/system/rustserver.service > /dev/null <<EOF
            [Unit]
            Description=Rust Dedicated Server
            Wants=network-online.target
            After=network-online.target

            [Service]
            Environment=SteamAppId=258550
            Environment=LD_LIBRARY_PATH=$HOME/rust/server:\$LD_LIBRARY_PATH
            Type=simple
            TimeoutSec=900
            Restart=on-failure
            RestartSec=10
            KillSignal=SIGINT
            User=ubuntu
            Group=ubuntu
            WorkingDirectory=$HOME/rust/server
            ExecStartPre=/usr/games/steamcmd +@sSteamCmdForcePlatformType linux +force_install_dir $HOME/rust/server +login anonymous +app_update 258550 +quit
            ExecStart=$HOME/rust/server/RustDedicated -batchmode +server.identity "${SERVER_IDENTITY}" +server.port 28015 +server.level "Procedural Map" +server.seed "${SEED}" +server.worldsize "${MAP_SIZE}" +server.maxplayers "${MAX_PLAYERS}" +server.saveinterval 150 +rcon.port 28016 +rcon.password "${RCON_PASSWORD}" +rcon.web 1 +server.password "${SERVER_PW}" +server.hostname "${HOSTNAME}" +decay.upkeep false -logfile /home/ubuntu/rust/server/rustserverlog.txt

            [Install]
            WantedBy=multi-user.target
            EOF
            
            wget https://github.com/OxideMod/Oxide.Rust/releases/latest/download/Oxide.Rust-linux.zip -O oxide.zip && unzip oxide.zip -d oxide-temp
            cp -r oxide-temp/* $HOME/rust/server/
            rm -rf oxide.zip oxide-temp

            mkdir -p $HOME/rust/server/oxide/plugins/ 
            wget --no-clobber \
                -P "$HOME/rust/server/oxide/plugins" \
                https://umod.org/plugins/MagicLoot.cs \
                https://umod.org/plugins/GatherManager.cs

            sudo systemctl daemon-reload
            sudo systemctl enable rustserver
            sudo systemctl start rustserver

  RustSpotInstance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref RustLaunchTemplate
        Version: !GetAtt RustLaunchTemplate.LatestVersionNumber
